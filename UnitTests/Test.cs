// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Test.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Test {

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Test {

    #region Descriptor
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static Test() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgpUZXN0LnByb3RvEgRUZXN0IqAHCgRNZXNzEhEKCURvdWJsZVZhbBgBIAEo", 
            "ARIQCghGbG9hdFZhbBgCIAEoAhIQCghJbnQzMlZhbBgDIAEoBRIQCghJbnQ2", 
            "NFZhbBgEIAEoAxIRCglVSW50MzJWYWwYBSABKA0SEQoJVUludDY0VmFsGAYg", 
            "ASgEEhEKCVNJbnQzMlZhbBgHIAEoERIRCglTSW50NjRWYWwYCCABKBISEgoK", 
            "Rml4ZWQzMlZhbBgJIAEoBxISCgpGaXhlZDY0VmFsGAogASgGEhMKC1NGaXhl", 
            "ZDMyVmFsGAsgASgPEhMKC1NGaXhlZDY0VmFsGAwgASgQEg8KB0Jvb2xWYWwY", 
            "DSABKAgSEQoJU3RyaW5nVmFsGA4gASgJEhAKCEJ5dGVzVmFsGA8gASgMEhEK", 
            "CURvdWJsZUFychhlIAMoARIQCghGbG9hdEFychhmIAMoAhIQCghJbnQzMkFy", 
            "chhnIAMoBRIQCghJbnQ2NEFychhoIAMoAxIRCglVSW50MzJBcnIYaSADKA0S", 
            "EQoJVUludDY0QXJyGGogAygEEhEKCVNJbnQzMkFychhrIAMoERIRCglTSW50", 
            "NjRBcnIYbCADKBISEgoKRml4ZWQzMkFychhtIAMoBxISCgpGaXhlZDY0QXJy", 
            "GG4gAygGEhMKC1NGaXhlZDMyQXJyGG8gAygPEhMKC1NGaXhlZDY0QXJyGHAg", 
            "AygQEg8KB0Jvb2xBcnIYcSADKAgSEQoJU3RyaW5nQXJyGHIgAygJEhAKCEJ5", 
            "dGVzQXJyGHMgAygMEhkKDERvdWJsZVBhY2tlZBjJASADKAFCAhABEhgKC0Zs", 
            "b2F0UGFja2VkGMoBIAMoAkICEAESGAoLSW50MzJQYWNrZWQYywEgAygFQgIQ", 
            "ARIYCgtJbnQ2NFBhY2tlZBjMASADKANCAhABEhkKDFVJbnQzMlBhY2tlZBjN", 
            "ASADKA1CAhABEhkKDFVJbnQ2NFBhY2tlZBjOASADKARCAhABEhkKDFNJbnQz", 
            "MlBhY2tlZBjPASADKBFCAhABEhkKDFNJbnQ2NFBhY2tlZBjQASADKBJCAhAB", 
            "EhoKDUZpeGVkMzJQYWNrZWQY0QEgAygHQgIQARIaCg1GaXhlZDY0UGFja2Vk", 
            "GNIBIAMoBkICEAESGwoOU0ZpeGVkMzJQYWNrZWQY0wEgAygPQgIQARIbCg5T", 
            "Rml4ZWQ2NFBhY2tlZBjUASADKBBCAhABEhcKCkJvb2xQYWNrZWQY1QEgAygI", 
            "QgIQASKYAQoJU3VwZXJNZXNzEhAKCEludDMyVmFsGAEgASgFEhsKB01lc3NW", 
            "YWwYAiABKAsyCi5UZXN0Lk1lc3MSEQoJRG91YmxlQXJyGGUgAygBEhsKB01l", 
            "c3NBcnIYZiADKAsyCi5UZXN0Lk1lc3MSGAoLSW50NjRQYWNrZWQYyQEgAygD", 
            "QgIQARISCglTdHJpbmdWYWwYrQIgASgJQgJIAWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedCodeInfo(null, new pbr::GeneratedCodeInfo[] {
            new pbr::GeneratedCodeInfo(typeof(global::Test.Mess), new[]{ "DoubleVal", "FloatVal", "Int32Val", "Int64Val", "UInt32Val", "UInt64Val", "SInt32Val", "SInt64Val", "Fixed32Val", "Fixed64Val", "SFixed32Val", "SFixed64Val", "BoolVal", "StringVal", "BytesVal", "DoubleArr", "FloatArr", "Int32Arr", "Int64Arr", "UInt32Arr", "UInt64Arr", "SInt32Arr", "SInt64Arr", "Fixed32Arr", "Fixed64Arr", "SFixed32Arr", "SFixed64Arr", "BoolArr", "StringArr", "BytesArr", "DoublePacked", "FloatPacked", "Int32Packed", "Int64Packed", "UInt32Packed", "UInt64Packed", "SInt32Packed", "SInt64Packed", "Fixed32Packed", "Fixed64Packed", "SFixed32Packed", "SFixed64Packed", "BoolPacked" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Test.SuperMess), new[]{ "Int32Val", "MessVal", "DoubleArr", "MessArr", "Int64Packed", "StringVal" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Mess : pb::IMessage<Mess> {
    private static readonly pb::MessageParser<Mess> _parser = new pb::MessageParser<Mess>(() => new Mess());
    public static pb::MessageParser<Mess> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Test.Test.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Mess() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Mess(Mess other) : this() {
      doubleVal_ = other.doubleVal_;
      floatVal_ = other.floatVal_;
      int32Val_ = other.int32Val_;
      int64Val_ = other.int64Val_;
      uInt32Val_ = other.uInt32Val_;
      uInt64Val_ = other.uInt64Val_;
      sInt32Val_ = other.sInt32Val_;
      sInt64Val_ = other.sInt64Val_;
      fixed32Val_ = other.fixed32Val_;
      fixed64Val_ = other.fixed64Val_;
      sFixed32Val_ = other.sFixed32Val_;
      sFixed64Val_ = other.sFixed64Val_;
      boolVal_ = other.boolVal_;
      stringVal_ = other.stringVal_;
      bytesVal_ = other.bytesVal_;
      doubleArr_ = other.doubleArr_.Clone();
      floatArr_ = other.floatArr_.Clone();
      int32Arr_ = other.int32Arr_.Clone();
      int64Arr_ = other.int64Arr_.Clone();
      uInt32Arr_ = other.uInt32Arr_.Clone();
      uInt64Arr_ = other.uInt64Arr_.Clone();
      sInt32Arr_ = other.sInt32Arr_.Clone();
      sInt64Arr_ = other.sInt64Arr_.Clone();
      fixed32Arr_ = other.fixed32Arr_.Clone();
      fixed64Arr_ = other.fixed64Arr_.Clone();
      sFixed32Arr_ = other.sFixed32Arr_.Clone();
      sFixed64Arr_ = other.sFixed64Arr_.Clone();
      boolArr_ = other.boolArr_.Clone();
      stringArr_ = other.stringArr_.Clone();
      bytesArr_ = other.bytesArr_.Clone();
      doublePacked_ = other.doublePacked_.Clone();
      floatPacked_ = other.floatPacked_.Clone();
      int32Packed_ = other.int32Packed_.Clone();
      int64Packed_ = other.int64Packed_.Clone();
      uInt32Packed_ = other.uInt32Packed_.Clone();
      uInt64Packed_ = other.uInt64Packed_.Clone();
      sInt32Packed_ = other.sInt32Packed_.Clone();
      sInt64Packed_ = other.sInt64Packed_.Clone();
      fixed32Packed_ = other.fixed32Packed_.Clone();
      fixed64Packed_ = other.fixed64Packed_.Clone();
      sFixed32Packed_ = other.sFixed32Packed_.Clone();
      sFixed64Packed_ = other.sFixed64Packed_.Clone();
      boolPacked_ = other.boolPacked_.Clone();
    }

    public Mess Clone() {
      return new Mess(this);
    }

    public const int DoubleValFieldNumber = 1;
    private double doubleVal_;
    public double DoubleVal {
      get { return doubleVal_; }
      set {
        doubleVal_ = value;
      }
    }

    public const int FloatValFieldNumber = 2;
    private float floatVal_;
    public float FloatVal {
      get { return floatVal_; }
      set {
        floatVal_ = value;
      }
    }

    public const int Int32ValFieldNumber = 3;
    private int int32Val_;
    public int Int32Val {
      get { return int32Val_; }
      set {
        int32Val_ = value;
      }
    }

    public const int Int64ValFieldNumber = 4;
    private long int64Val_;
    public long Int64Val {
      get { return int64Val_; }
      set {
        int64Val_ = value;
      }
    }

    public const int UInt32ValFieldNumber = 5;
    private uint uInt32Val_;
    public uint UInt32Val {
      get { return uInt32Val_; }
      set {
        uInt32Val_ = value;
      }
    }

    public const int UInt64ValFieldNumber = 6;
    private ulong uInt64Val_;
    public ulong UInt64Val {
      get { return uInt64Val_; }
      set {
        uInt64Val_ = value;
      }
    }

    public const int SInt32ValFieldNumber = 7;
    private int sInt32Val_;
    public int SInt32Val {
      get { return sInt32Val_; }
      set {
        sInt32Val_ = value;
      }
    }

    public const int SInt64ValFieldNumber = 8;
    private long sInt64Val_;
    public long SInt64Val {
      get { return sInt64Val_; }
      set {
        sInt64Val_ = value;
      }
    }

    public const int Fixed32ValFieldNumber = 9;
    private uint fixed32Val_;
    public uint Fixed32Val {
      get { return fixed32Val_; }
      set {
        fixed32Val_ = value;
      }
    }

    public const int Fixed64ValFieldNumber = 10;
    private ulong fixed64Val_;
    public ulong Fixed64Val {
      get { return fixed64Val_; }
      set {
        fixed64Val_ = value;
      }
    }

    public const int SFixed32ValFieldNumber = 11;
    private int sFixed32Val_;
    public int SFixed32Val {
      get { return sFixed32Val_; }
      set {
        sFixed32Val_ = value;
      }
    }

    public const int SFixed64ValFieldNumber = 12;
    private long sFixed64Val_;
    public long SFixed64Val {
      get { return sFixed64Val_; }
      set {
        sFixed64Val_ = value;
      }
    }

    public const int BoolValFieldNumber = 13;
    private bool boolVal_;
    public bool BoolVal {
      get { return boolVal_; }
      set {
        boolVal_ = value;
      }
    }

    public const int StringValFieldNumber = 14;
    private string stringVal_ = "";
    public string StringVal {
      get { return stringVal_; }
      set {
        stringVal_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int BytesValFieldNumber = 15;
    private pb::ByteString bytesVal_ = pb::ByteString.Empty;
    public pb::ByteString BytesVal {
      get { return bytesVal_; }
      set {
        bytesVal_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int DoubleArrFieldNumber = 101;
    private static readonly pb::FieldCodec<double> _repeated_doubleArr_codec
        = pb::FieldCodec.ForDouble(810);
    private readonly pbc::RepeatedField<double> doubleArr_ = new pbc::RepeatedField<double>();
    public pbc::RepeatedField<double> DoubleArr {
      get { return doubleArr_; }
    }

    public const int FloatArrFieldNumber = 102;
    private static readonly pb::FieldCodec<float> _repeated_floatArr_codec
        = pb::FieldCodec.ForFloat(818);
    private readonly pbc::RepeatedField<float> floatArr_ = new pbc::RepeatedField<float>();
    public pbc::RepeatedField<float> FloatArr {
      get { return floatArr_; }
    }

    public const int Int32ArrFieldNumber = 103;
    private static readonly pb::FieldCodec<int> _repeated_int32Arr_codec
        = pb::FieldCodec.ForInt32(826);
    private readonly pbc::RepeatedField<int> int32Arr_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> Int32Arr {
      get { return int32Arr_; }
    }

    public const int Int64ArrFieldNumber = 104;
    private static readonly pb::FieldCodec<long> _repeated_int64Arr_codec
        = pb::FieldCodec.ForInt64(834);
    private readonly pbc::RepeatedField<long> int64Arr_ = new pbc::RepeatedField<long>();
    public pbc::RepeatedField<long> Int64Arr {
      get { return int64Arr_; }
    }

    public const int UInt32ArrFieldNumber = 105;
    private static readonly pb::FieldCodec<uint> _repeated_uInt32Arr_codec
        = pb::FieldCodec.ForUInt32(842);
    private readonly pbc::RepeatedField<uint> uInt32Arr_ = new pbc::RepeatedField<uint>();
    public pbc::RepeatedField<uint> UInt32Arr {
      get { return uInt32Arr_; }
    }

    public const int UInt64ArrFieldNumber = 106;
    private static readonly pb::FieldCodec<ulong> _repeated_uInt64Arr_codec
        = pb::FieldCodec.ForUInt64(850);
    private readonly pbc::RepeatedField<ulong> uInt64Arr_ = new pbc::RepeatedField<ulong>();
    public pbc::RepeatedField<ulong> UInt64Arr {
      get { return uInt64Arr_; }
    }

    public const int SInt32ArrFieldNumber = 107;
    private static readonly pb::FieldCodec<int> _repeated_sInt32Arr_codec
        = pb::FieldCodec.ForSInt32(858);
    private readonly pbc::RepeatedField<int> sInt32Arr_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> SInt32Arr {
      get { return sInt32Arr_; }
    }

    public const int SInt64ArrFieldNumber = 108;
    private static readonly pb::FieldCodec<long> _repeated_sInt64Arr_codec
        = pb::FieldCodec.ForSInt64(866);
    private readonly pbc::RepeatedField<long> sInt64Arr_ = new pbc::RepeatedField<long>();
    public pbc::RepeatedField<long> SInt64Arr {
      get { return sInt64Arr_; }
    }

    public const int Fixed32ArrFieldNumber = 109;
    private static readonly pb::FieldCodec<uint> _repeated_fixed32Arr_codec
        = pb::FieldCodec.ForFixed32(874);
    private readonly pbc::RepeatedField<uint> fixed32Arr_ = new pbc::RepeatedField<uint>();
    public pbc::RepeatedField<uint> Fixed32Arr {
      get { return fixed32Arr_; }
    }

    public const int Fixed64ArrFieldNumber = 110;
    private static readonly pb::FieldCodec<ulong> _repeated_fixed64Arr_codec
        = pb::FieldCodec.ForFixed64(882);
    private readonly pbc::RepeatedField<ulong> fixed64Arr_ = new pbc::RepeatedField<ulong>();
    public pbc::RepeatedField<ulong> Fixed64Arr {
      get { return fixed64Arr_; }
    }

    public const int SFixed32ArrFieldNumber = 111;
    private static readonly pb::FieldCodec<int> _repeated_sFixed32Arr_codec
        = pb::FieldCodec.ForSFixed32(890);
    private readonly pbc::RepeatedField<int> sFixed32Arr_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> SFixed32Arr {
      get { return sFixed32Arr_; }
    }

    public const int SFixed64ArrFieldNumber = 112;
    private static readonly pb::FieldCodec<long> _repeated_sFixed64Arr_codec
        = pb::FieldCodec.ForSFixed64(898);
    private readonly pbc::RepeatedField<long> sFixed64Arr_ = new pbc::RepeatedField<long>();
    public pbc::RepeatedField<long> SFixed64Arr {
      get { return sFixed64Arr_; }
    }

    public const int BoolArrFieldNumber = 113;
    private static readonly pb::FieldCodec<bool> _repeated_boolArr_codec
        = pb::FieldCodec.ForBool(906);
    private readonly pbc::RepeatedField<bool> boolArr_ = new pbc::RepeatedField<bool>();
    public pbc::RepeatedField<bool> BoolArr {
      get { return boolArr_; }
    }

    public const int StringArrFieldNumber = 114;
    private static readonly pb::FieldCodec<string> _repeated_stringArr_codec
        = pb::FieldCodec.ForString(914);
    private readonly pbc::RepeatedField<string> stringArr_ = new pbc::RepeatedField<string>();
    public pbc::RepeatedField<string> StringArr {
      get { return stringArr_; }
    }

    public const int BytesArrFieldNumber = 115;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_bytesArr_codec
        = pb::FieldCodec.ForBytes(922);
    private readonly pbc::RepeatedField<pb::ByteString> bytesArr_ = new pbc::RepeatedField<pb::ByteString>();
    public pbc::RepeatedField<pb::ByteString> BytesArr {
      get { return bytesArr_; }
    }

    public const int DoublePackedFieldNumber = 201;
    private static readonly pb::FieldCodec<double> _repeated_doublePacked_codec
        = pb::FieldCodec.ForDouble(1610);
    private readonly pbc::RepeatedField<double> doublePacked_ = new pbc::RepeatedField<double>();
    public pbc::RepeatedField<double> DoublePacked {
      get { return doublePacked_; }
    }

    public const int FloatPackedFieldNumber = 202;
    private static readonly pb::FieldCodec<float> _repeated_floatPacked_codec
        = pb::FieldCodec.ForFloat(1618);
    private readonly pbc::RepeatedField<float> floatPacked_ = new pbc::RepeatedField<float>();
    public pbc::RepeatedField<float> FloatPacked {
      get { return floatPacked_; }
    }

    public const int Int32PackedFieldNumber = 203;
    private static readonly pb::FieldCodec<int> _repeated_int32Packed_codec
        = pb::FieldCodec.ForInt32(1626);
    private readonly pbc::RepeatedField<int> int32Packed_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> Int32Packed {
      get { return int32Packed_; }
    }

    public const int Int64PackedFieldNumber = 204;
    private static readonly pb::FieldCodec<long> _repeated_int64Packed_codec
        = pb::FieldCodec.ForInt64(1634);
    private readonly pbc::RepeatedField<long> int64Packed_ = new pbc::RepeatedField<long>();
    public pbc::RepeatedField<long> Int64Packed {
      get { return int64Packed_; }
    }

    public const int UInt32PackedFieldNumber = 205;
    private static readonly pb::FieldCodec<uint> _repeated_uInt32Packed_codec
        = pb::FieldCodec.ForUInt32(1642);
    private readonly pbc::RepeatedField<uint> uInt32Packed_ = new pbc::RepeatedField<uint>();
    public pbc::RepeatedField<uint> UInt32Packed {
      get { return uInt32Packed_; }
    }

    public const int UInt64PackedFieldNumber = 206;
    private static readonly pb::FieldCodec<ulong> _repeated_uInt64Packed_codec
        = pb::FieldCodec.ForUInt64(1650);
    private readonly pbc::RepeatedField<ulong> uInt64Packed_ = new pbc::RepeatedField<ulong>();
    public pbc::RepeatedField<ulong> UInt64Packed {
      get { return uInt64Packed_; }
    }

    public const int SInt32PackedFieldNumber = 207;
    private static readonly pb::FieldCodec<int> _repeated_sInt32Packed_codec
        = pb::FieldCodec.ForSInt32(1658);
    private readonly pbc::RepeatedField<int> sInt32Packed_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> SInt32Packed {
      get { return sInt32Packed_; }
    }

    public const int SInt64PackedFieldNumber = 208;
    private static readonly pb::FieldCodec<long> _repeated_sInt64Packed_codec
        = pb::FieldCodec.ForSInt64(1666);
    private readonly pbc::RepeatedField<long> sInt64Packed_ = new pbc::RepeatedField<long>();
    public pbc::RepeatedField<long> SInt64Packed {
      get { return sInt64Packed_; }
    }

    public const int Fixed32PackedFieldNumber = 209;
    private static readonly pb::FieldCodec<uint> _repeated_fixed32Packed_codec
        = pb::FieldCodec.ForFixed32(1674);
    private readonly pbc::RepeatedField<uint> fixed32Packed_ = new pbc::RepeatedField<uint>();
    public pbc::RepeatedField<uint> Fixed32Packed {
      get { return fixed32Packed_; }
    }

    public const int Fixed64PackedFieldNumber = 210;
    private static readonly pb::FieldCodec<ulong> _repeated_fixed64Packed_codec
        = pb::FieldCodec.ForFixed64(1682);
    private readonly pbc::RepeatedField<ulong> fixed64Packed_ = new pbc::RepeatedField<ulong>();
    public pbc::RepeatedField<ulong> Fixed64Packed {
      get { return fixed64Packed_; }
    }

    public const int SFixed32PackedFieldNumber = 211;
    private static readonly pb::FieldCodec<int> _repeated_sFixed32Packed_codec
        = pb::FieldCodec.ForSFixed32(1690);
    private readonly pbc::RepeatedField<int> sFixed32Packed_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> SFixed32Packed {
      get { return sFixed32Packed_; }
    }

    public const int SFixed64PackedFieldNumber = 212;
    private static readonly pb::FieldCodec<long> _repeated_sFixed64Packed_codec
        = pb::FieldCodec.ForSFixed64(1698);
    private readonly pbc::RepeatedField<long> sFixed64Packed_ = new pbc::RepeatedField<long>();
    public pbc::RepeatedField<long> SFixed64Packed {
      get { return sFixed64Packed_; }
    }

    public const int BoolPackedFieldNumber = 213;
    private static readonly pb::FieldCodec<bool> _repeated_boolPacked_codec
        = pb::FieldCodec.ForBool(1706);
    private readonly pbc::RepeatedField<bool> boolPacked_ = new pbc::RepeatedField<bool>();
    public pbc::RepeatedField<bool> BoolPacked {
      get { return boolPacked_; }
    }

    public override bool Equals(object other) {
      return Equals(other as Mess);
    }

    public bool Equals(Mess other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DoubleVal != other.DoubleVal) return false;
      if (FloatVal != other.FloatVal) return false;
      if (Int32Val != other.Int32Val) return false;
      if (Int64Val != other.Int64Val) return false;
      if (UInt32Val != other.UInt32Val) return false;
      if (UInt64Val != other.UInt64Val) return false;
      if (SInt32Val != other.SInt32Val) return false;
      if (SInt64Val != other.SInt64Val) return false;
      if (Fixed32Val != other.Fixed32Val) return false;
      if (Fixed64Val != other.Fixed64Val) return false;
      if (SFixed32Val != other.SFixed32Val) return false;
      if (SFixed64Val != other.SFixed64Val) return false;
      if (BoolVal != other.BoolVal) return false;
      if (StringVal != other.StringVal) return false;
      if (BytesVal != other.BytesVal) return false;
      if(!doubleArr_.Equals(other.doubleArr_)) return false;
      if(!floatArr_.Equals(other.floatArr_)) return false;
      if(!int32Arr_.Equals(other.int32Arr_)) return false;
      if(!int64Arr_.Equals(other.int64Arr_)) return false;
      if(!uInt32Arr_.Equals(other.uInt32Arr_)) return false;
      if(!uInt64Arr_.Equals(other.uInt64Arr_)) return false;
      if(!sInt32Arr_.Equals(other.sInt32Arr_)) return false;
      if(!sInt64Arr_.Equals(other.sInt64Arr_)) return false;
      if(!fixed32Arr_.Equals(other.fixed32Arr_)) return false;
      if(!fixed64Arr_.Equals(other.fixed64Arr_)) return false;
      if(!sFixed32Arr_.Equals(other.sFixed32Arr_)) return false;
      if(!sFixed64Arr_.Equals(other.sFixed64Arr_)) return false;
      if(!boolArr_.Equals(other.boolArr_)) return false;
      if(!stringArr_.Equals(other.stringArr_)) return false;
      if(!bytesArr_.Equals(other.bytesArr_)) return false;
      if(!doublePacked_.Equals(other.doublePacked_)) return false;
      if(!floatPacked_.Equals(other.floatPacked_)) return false;
      if(!int32Packed_.Equals(other.int32Packed_)) return false;
      if(!int64Packed_.Equals(other.int64Packed_)) return false;
      if(!uInt32Packed_.Equals(other.uInt32Packed_)) return false;
      if(!uInt64Packed_.Equals(other.uInt64Packed_)) return false;
      if(!sInt32Packed_.Equals(other.sInt32Packed_)) return false;
      if(!sInt64Packed_.Equals(other.sInt64Packed_)) return false;
      if(!fixed32Packed_.Equals(other.fixed32Packed_)) return false;
      if(!fixed64Packed_.Equals(other.fixed64Packed_)) return false;
      if(!sFixed32Packed_.Equals(other.sFixed32Packed_)) return false;
      if(!sFixed64Packed_.Equals(other.sFixed64Packed_)) return false;
      if(!boolPacked_.Equals(other.boolPacked_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (DoubleVal != 0D) hash ^= DoubleVal.GetHashCode();
      if (FloatVal != 0F) hash ^= FloatVal.GetHashCode();
      if (Int32Val != 0) hash ^= Int32Val.GetHashCode();
      if (Int64Val != 0L) hash ^= Int64Val.GetHashCode();
      if (UInt32Val != 0) hash ^= UInt32Val.GetHashCode();
      if (UInt64Val != 0UL) hash ^= UInt64Val.GetHashCode();
      if (SInt32Val != 0) hash ^= SInt32Val.GetHashCode();
      if (SInt64Val != 0L) hash ^= SInt64Val.GetHashCode();
      if (Fixed32Val != 0) hash ^= Fixed32Val.GetHashCode();
      if (Fixed64Val != 0UL) hash ^= Fixed64Val.GetHashCode();
      if (SFixed32Val != 0) hash ^= SFixed32Val.GetHashCode();
      if (SFixed64Val != 0L) hash ^= SFixed64Val.GetHashCode();
      if (BoolVal != false) hash ^= BoolVal.GetHashCode();
      if (StringVal.Length != 0) hash ^= StringVal.GetHashCode();
      if (BytesVal.Length != 0) hash ^= BytesVal.GetHashCode();
      hash ^= doubleArr_.GetHashCode();
      hash ^= floatArr_.GetHashCode();
      hash ^= int32Arr_.GetHashCode();
      hash ^= int64Arr_.GetHashCode();
      hash ^= uInt32Arr_.GetHashCode();
      hash ^= uInt64Arr_.GetHashCode();
      hash ^= sInt32Arr_.GetHashCode();
      hash ^= sInt64Arr_.GetHashCode();
      hash ^= fixed32Arr_.GetHashCode();
      hash ^= fixed64Arr_.GetHashCode();
      hash ^= sFixed32Arr_.GetHashCode();
      hash ^= sFixed64Arr_.GetHashCode();
      hash ^= boolArr_.GetHashCode();
      hash ^= stringArr_.GetHashCode();
      hash ^= bytesArr_.GetHashCode();
      hash ^= doublePacked_.GetHashCode();
      hash ^= floatPacked_.GetHashCode();
      hash ^= int32Packed_.GetHashCode();
      hash ^= int64Packed_.GetHashCode();
      hash ^= uInt32Packed_.GetHashCode();
      hash ^= uInt64Packed_.GetHashCode();
      hash ^= sInt32Packed_.GetHashCode();
      hash ^= sInt64Packed_.GetHashCode();
      hash ^= fixed32Packed_.GetHashCode();
      hash ^= fixed64Packed_.GetHashCode();
      hash ^= sFixed32Packed_.GetHashCode();
      hash ^= sFixed64Packed_.GetHashCode();
      hash ^= boolPacked_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (DoubleVal != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(DoubleVal);
      }
      if (FloatVal != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(FloatVal);
      }
      if (Int32Val != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Int32Val);
      }
      if (Int64Val != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Int64Val);
      }
      if (UInt32Val != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(UInt32Val);
      }
      if (UInt64Val != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(UInt64Val);
      }
      if (SInt32Val != 0) {
        output.WriteRawTag(56);
        output.WriteSInt32(SInt32Val);
      }
      if (SInt64Val != 0L) {
        output.WriteRawTag(64);
        output.WriteSInt64(SInt64Val);
      }
      if (Fixed32Val != 0) {
        output.WriteRawTag(77);
        output.WriteFixed32(Fixed32Val);
      }
      if (Fixed64Val != 0UL) {
        output.WriteRawTag(81);
        output.WriteFixed64(Fixed64Val);
      }
      if (SFixed32Val != 0) {
        output.WriteRawTag(93);
        output.WriteSFixed32(SFixed32Val);
      }
      if (SFixed64Val != 0L) {
        output.WriteRawTag(97);
        output.WriteSFixed64(SFixed64Val);
      }
      if (BoolVal != false) {
        output.WriteRawTag(104);
        output.WriteBool(BoolVal);
      }
      if (StringVal.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(StringVal);
      }
      if (BytesVal.Length != 0) {
        output.WriteRawTag(122);
        output.WriteBytes(BytesVal);
      }
      doubleArr_.WriteTo(output, _repeated_doubleArr_codec);
      floatArr_.WriteTo(output, _repeated_floatArr_codec);
      int32Arr_.WriteTo(output, _repeated_int32Arr_codec);
      int64Arr_.WriteTo(output, _repeated_int64Arr_codec);
      uInt32Arr_.WriteTo(output, _repeated_uInt32Arr_codec);
      uInt64Arr_.WriteTo(output, _repeated_uInt64Arr_codec);
      sInt32Arr_.WriteTo(output, _repeated_sInt32Arr_codec);
      sInt64Arr_.WriteTo(output, _repeated_sInt64Arr_codec);
      fixed32Arr_.WriteTo(output, _repeated_fixed32Arr_codec);
      fixed64Arr_.WriteTo(output, _repeated_fixed64Arr_codec);
      sFixed32Arr_.WriteTo(output, _repeated_sFixed32Arr_codec);
      sFixed64Arr_.WriteTo(output, _repeated_sFixed64Arr_codec);
      boolArr_.WriteTo(output, _repeated_boolArr_codec);
      stringArr_.WriteTo(output, _repeated_stringArr_codec);
      bytesArr_.WriteTo(output, _repeated_bytesArr_codec);
      doublePacked_.WriteTo(output, _repeated_doublePacked_codec);
      floatPacked_.WriteTo(output, _repeated_floatPacked_codec);
      int32Packed_.WriteTo(output, _repeated_int32Packed_codec);
      int64Packed_.WriteTo(output, _repeated_int64Packed_codec);
      uInt32Packed_.WriteTo(output, _repeated_uInt32Packed_codec);
      uInt64Packed_.WriteTo(output, _repeated_uInt64Packed_codec);
      sInt32Packed_.WriteTo(output, _repeated_sInt32Packed_codec);
      sInt64Packed_.WriteTo(output, _repeated_sInt64Packed_codec);
      fixed32Packed_.WriteTo(output, _repeated_fixed32Packed_codec);
      fixed64Packed_.WriteTo(output, _repeated_fixed64Packed_codec);
      sFixed32Packed_.WriteTo(output, _repeated_sFixed32Packed_codec);
      sFixed64Packed_.WriteTo(output, _repeated_sFixed64Packed_codec);
      boolPacked_.WriteTo(output, _repeated_boolPacked_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (DoubleVal != 0D) {
        size += 1 + 8;
      }
      if (FloatVal != 0F) {
        size += 1 + 4;
      }
      if (Int32Val != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Int32Val);
      }
      if (Int64Val != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Int64Val);
      }
      if (UInt32Val != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UInt32Val);
      }
      if (UInt64Val != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UInt64Val);
      }
      if (SInt32Val != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(SInt32Val);
      }
      if (SInt64Val != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(SInt64Val);
      }
      if (Fixed32Val != 0) {
        size += 1 + 4;
      }
      if (Fixed64Val != 0UL) {
        size += 1 + 8;
      }
      if (SFixed32Val != 0) {
        size += 1 + 4;
      }
      if (SFixed64Val != 0L) {
        size += 1 + 8;
      }
      if (BoolVal != false) {
        size += 1 + 1;
      }
      if (StringVal.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StringVal);
      }
      if (BytesVal.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BytesVal);
      }
      size += doubleArr_.CalculateSize(_repeated_doubleArr_codec);
      size += floatArr_.CalculateSize(_repeated_floatArr_codec);
      size += int32Arr_.CalculateSize(_repeated_int32Arr_codec);
      size += int64Arr_.CalculateSize(_repeated_int64Arr_codec);
      size += uInt32Arr_.CalculateSize(_repeated_uInt32Arr_codec);
      size += uInt64Arr_.CalculateSize(_repeated_uInt64Arr_codec);
      size += sInt32Arr_.CalculateSize(_repeated_sInt32Arr_codec);
      size += sInt64Arr_.CalculateSize(_repeated_sInt64Arr_codec);
      size += fixed32Arr_.CalculateSize(_repeated_fixed32Arr_codec);
      size += fixed64Arr_.CalculateSize(_repeated_fixed64Arr_codec);
      size += sFixed32Arr_.CalculateSize(_repeated_sFixed32Arr_codec);
      size += sFixed64Arr_.CalculateSize(_repeated_sFixed64Arr_codec);
      size += boolArr_.CalculateSize(_repeated_boolArr_codec);
      size += stringArr_.CalculateSize(_repeated_stringArr_codec);
      size += bytesArr_.CalculateSize(_repeated_bytesArr_codec);
      size += doublePacked_.CalculateSize(_repeated_doublePacked_codec);
      size += floatPacked_.CalculateSize(_repeated_floatPacked_codec);
      size += int32Packed_.CalculateSize(_repeated_int32Packed_codec);
      size += int64Packed_.CalculateSize(_repeated_int64Packed_codec);
      size += uInt32Packed_.CalculateSize(_repeated_uInt32Packed_codec);
      size += uInt64Packed_.CalculateSize(_repeated_uInt64Packed_codec);
      size += sInt32Packed_.CalculateSize(_repeated_sInt32Packed_codec);
      size += sInt64Packed_.CalculateSize(_repeated_sInt64Packed_codec);
      size += fixed32Packed_.CalculateSize(_repeated_fixed32Packed_codec);
      size += fixed64Packed_.CalculateSize(_repeated_fixed64Packed_codec);
      size += sFixed32Packed_.CalculateSize(_repeated_sFixed32Packed_codec);
      size += sFixed64Packed_.CalculateSize(_repeated_sFixed64Packed_codec);
      size += boolPacked_.CalculateSize(_repeated_boolPacked_codec);
      return size;
    }

    public void MergeFrom(Mess other) {
      if (other == null) {
        return;
      }
      if (other.DoubleVal != 0D) {
        DoubleVal = other.DoubleVal;
      }
      if (other.FloatVal != 0F) {
        FloatVal = other.FloatVal;
      }
      if (other.Int32Val != 0) {
        Int32Val = other.Int32Val;
      }
      if (other.Int64Val != 0L) {
        Int64Val = other.Int64Val;
      }
      if (other.UInt32Val != 0) {
        UInt32Val = other.UInt32Val;
      }
      if (other.UInt64Val != 0UL) {
        UInt64Val = other.UInt64Val;
      }
      if (other.SInt32Val != 0) {
        SInt32Val = other.SInt32Val;
      }
      if (other.SInt64Val != 0L) {
        SInt64Val = other.SInt64Val;
      }
      if (other.Fixed32Val != 0) {
        Fixed32Val = other.Fixed32Val;
      }
      if (other.Fixed64Val != 0UL) {
        Fixed64Val = other.Fixed64Val;
      }
      if (other.SFixed32Val != 0) {
        SFixed32Val = other.SFixed32Val;
      }
      if (other.SFixed64Val != 0L) {
        SFixed64Val = other.SFixed64Val;
      }
      if (other.BoolVal != false) {
        BoolVal = other.BoolVal;
      }
      if (other.StringVal.Length != 0) {
        StringVal = other.StringVal;
      }
      if (other.BytesVal.Length != 0) {
        BytesVal = other.BytesVal;
      }
      doubleArr_.Add(other.doubleArr_);
      floatArr_.Add(other.floatArr_);
      int32Arr_.Add(other.int32Arr_);
      int64Arr_.Add(other.int64Arr_);
      uInt32Arr_.Add(other.uInt32Arr_);
      uInt64Arr_.Add(other.uInt64Arr_);
      sInt32Arr_.Add(other.sInt32Arr_);
      sInt64Arr_.Add(other.sInt64Arr_);
      fixed32Arr_.Add(other.fixed32Arr_);
      fixed64Arr_.Add(other.fixed64Arr_);
      sFixed32Arr_.Add(other.sFixed32Arr_);
      sFixed64Arr_.Add(other.sFixed64Arr_);
      boolArr_.Add(other.boolArr_);
      stringArr_.Add(other.stringArr_);
      bytesArr_.Add(other.bytesArr_);
      doublePacked_.Add(other.doublePacked_);
      floatPacked_.Add(other.floatPacked_);
      int32Packed_.Add(other.int32Packed_);
      int64Packed_.Add(other.int64Packed_);
      uInt32Packed_.Add(other.uInt32Packed_);
      uInt64Packed_.Add(other.uInt64Packed_);
      sInt32Packed_.Add(other.sInt32Packed_);
      sInt64Packed_.Add(other.sInt64Packed_);
      fixed32Packed_.Add(other.fixed32Packed_);
      fixed64Packed_.Add(other.fixed64Packed_);
      sFixed32Packed_.Add(other.sFixed32Packed_);
      sFixed64Packed_.Add(other.sFixed64Packed_);
      boolPacked_.Add(other.boolPacked_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            DoubleVal = input.ReadDouble();
            break;
          }
          case 21: {
            FloatVal = input.ReadFloat();
            break;
          }
          case 24: {
            Int32Val = input.ReadInt32();
            break;
          }
          case 32: {
            Int64Val = input.ReadInt64();
            break;
          }
          case 40: {
            UInt32Val = input.ReadUInt32();
            break;
          }
          case 48: {
            UInt64Val = input.ReadUInt64();
            break;
          }
          case 56: {
            SInt32Val = input.ReadSInt32();
            break;
          }
          case 64: {
            SInt64Val = input.ReadSInt64();
            break;
          }
          case 77: {
            Fixed32Val = input.ReadFixed32();
            break;
          }
          case 81: {
            Fixed64Val = input.ReadFixed64();
            break;
          }
          case 93: {
            SFixed32Val = input.ReadSFixed32();
            break;
          }
          case 97: {
            SFixed64Val = input.ReadSFixed64();
            break;
          }
          case 104: {
            BoolVal = input.ReadBool();
            break;
          }
          case 114: {
            StringVal = input.ReadString();
            break;
          }
          case 122: {
            BytesVal = input.ReadBytes();
            break;
          }
          case 810:
          case 809: {
            doubleArr_.AddEntriesFrom(input, _repeated_doubleArr_codec);
            break;
          }
          case 818:
          case 821: {
            floatArr_.AddEntriesFrom(input, _repeated_floatArr_codec);
            break;
          }
          case 826:
          case 824: {
            int32Arr_.AddEntriesFrom(input, _repeated_int32Arr_codec);
            break;
          }
          case 834:
          case 832: {
            int64Arr_.AddEntriesFrom(input, _repeated_int64Arr_codec);
            break;
          }
          case 842:
          case 840: {
            uInt32Arr_.AddEntriesFrom(input, _repeated_uInt32Arr_codec);
            break;
          }
          case 850:
          case 848: {
            uInt64Arr_.AddEntriesFrom(input, _repeated_uInt64Arr_codec);
            break;
          }
          case 858:
          case 856: {
            sInt32Arr_.AddEntriesFrom(input, _repeated_sInt32Arr_codec);
            break;
          }
          case 866:
          case 864: {
            sInt64Arr_.AddEntriesFrom(input, _repeated_sInt64Arr_codec);
            break;
          }
          case 874:
          case 877: {
            fixed32Arr_.AddEntriesFrom(input, _repeated_fixed32Arr_codec);
            break;
          }
          case 882:
          case 881: {
            fixed64Arr_.AddEntriesFrom(input, _repeated_fixed64Arr_codec);
            break;
          }
          case 890:
          case 893: {
            sFixed32Arr_.AddEntriesFrom(input, _repeated_sFixed32Arr_codec);
            break;
          }
          case 898:
          case 897: {
            sFixed64Arr_.AddEntriesFrom(input, _repeated_sFixed64Arr_codec);
            break;
          }
          case 906:
          case 904: {
            boolArr_.AddEntriesFrom(input, _repeated_boolArr_codec);
            break;
          }
          case 914: {
            stringArr_.AddEntriesFrom(input, _repeated_stringArr_codec);
            break;
          }
          case 922: {
            bytesArr_.AddEntriesFrom(input, _repeated_bytesArr_codec);
            break;
          }
          case 1610:
          case 1609: {
            doublePacked_.AddEntriesFrom(input, _repeated_doublePacked_codec);
            break;
          }
          case 1618:
          case 1621: {
            floatPacked_.AddEntriesFrom(input, _repeated_floatPacked_codec);
            break;
          }
          case 1626:
          case 1624: {
            int32Packed_.AddEntriesFrom(input, _repeated_int32Packed_codec);
            break;
          }
          case 1634:
          case 1632: {
            int64Packed_.AddEntriesFrom(input, _repeated_int64Packed_codec);
            break;
          }
          case 1642:
          case 1640: {
            uInt32Packed_.AddEntriesFrom(input, _repeated_uInt32Packed_codec);
            break;
          }
          case 1650:
          case 1648: {
            uInt64Packed_.AddEntriesFrom(input, _repeated_uInt64Packed_codec);
            break;
          }
          case 1658:
          case 1656: {
            sInt32Packed_.AddEntriesFrom(input, _repeated_sInt32Packed_codec);
            break;
          }
          case 1666:
          case 1664: {
            sInt64Packed_.AddEntriesFrom(input, _repeated_sInt64Packed_codec);
            break;
          }
          case 1674:
          case 1677: {
            fixed32Packed_.AddEntriesFrom(input, _repeated_fixed32Packed_codec);
            break;
          }
          case 1682:
          case 1681: {
            fixed64Packed_.AddEntriesFrom(input, _repeated_fixed64Packed_codec);
            break;
          }
          case 1690:
          case 1693: {
            sFixed32Packed_.AddEntriesFrom(input, _repeated_sFixed32Packed_codec);
            break;
          }
          case 1698:
          case 1697: {
            sFixed64Packed_.AddEntriesFrom(input, _repeated_sFixed64Packed_codec);
            break;
          }
          case 1706:
          case 1704: {
            boolPacked_.AddEntriesFrom(input, _repeated_boolPacked_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SuperMess : pb::IMessage<SuperMess> {
    private static readonly pb::MessageParser<SuperMess> _parser = new pb::MessageParser<SuperMess>(() => new SuperMess());
    public static pb::MessageParser<SuperMess> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Test.Test.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public SuperMess() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SuperMess(SuperMess other) : this() {
      int32Val_ = other.int32Val_;
      MessVal = other.messVal_ != null ? other.MessVal.Clone() : null;
      doubleArr_ = other.doubleArr_.Clone();
      messArr_ = other.messArr_.Clone();
      int64Packed_ = other.int64Packed_.Clone();
      stringVal_ = other.stringVal_;
    }

    public SuperMess Clone() {
      return new SuperMess(this);
    }

    public const int Int32ValFieldNumber = 1;
    private int int32Val_;
    public int Int32Val {
      get { return int32Val_; }
      set {
        int32Val_ = value;
      }
    }

    public const int MessValFieldNumber = 2;
    private global::Test.Mess messVal_;
    public global::Test.Mess MessVal {
      get { return messVal_; }
      set {
        messVal_ = value;
      }
    }

    public const int DoubleArrFieldNumber = 101;
    private static readonly pb::FieldCodec<double> _repeated_doubleArr_codec
        = pb::FieldCodec.ForDouble(810);
    private readonly pbc::RepeatedField<double> doubleArr_ = new pbc::RepeatedField<double>();
    public pbc::RepeatedField<double> DoubleArr {
      get { return doubleArr_; }
    }

    public const int MessArrFieldNumber = 102;
    private static readonly pb::FieldCodec<global::Test.Mess> _repeated_messArr_codec
        = pb::FieldCodec.ForMessage(818, global::Test.Mess.Parser);
    private readonly pbc::RepeatedField<global::Test.Mess> messArr_ = new pbc::RepeatedField<global::Test.Mess>();
    public pbc::RepeatedField<global::Test.Mess> MessArr {
      get { return messArr_; }
    }

    public const int Int64PackedFieldNumber = 201;
    private static readonly pb::FieldCodec<long> _repeated_int64Packed_codec
        = pb::FieldCodec.ForInt64(1610);
    private readonly pbc::RepeatedField<long> int64Packed_ = new pbc::RepeatedField<long>();
    public pbc::RepeatedField<long> Int64Packed {
      get { return int64Packed_; }
    }

    public const int StringValFieldNumber = 301;
    private string stringVal_ = "";
    public string StringVal {
      get { return stringVal_; }
      set {
        stringVal_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as SuperMess);
    }

    public bool Equals(SuperMess other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Int32Val != other.Int32Val) return false;
      if (!object.Equals(MessVal, other.MessVal)) return false;
      if(!doubleArr_.Equals(other.doubleArr_)) return false;
      if(!messArr_.Equals(other.messArr_)) return false;
      if(!int64Packed_.Equals(other.int64Packed_)) return false;
      if (StringVal != other.StringVal) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Int32Val != 0) hash ^= Int32Val.GetHashCode();
      if (messVal_ != null) hash ^= MessVal.GetHashCode();
      hash ^= doubleArr_.GetHashCode();
      hash ^= messArr_.GetHashCode();
      hash ^= int64Packed_.GetHashCode();
      if (StringVal.Length != 0) hash ^= StringVal.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Int32Val != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Int32Val);
      }
      if (messVal_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(MessVal);
      }
      doubleArr_.WriteTo(output, _repeated_doubleArr_codec);
      messArr_.WriteTo(output, _repeated_messArr_codec);
      int64Packed_.WriteTo(output, _repeated_int64Packed_codec);
      if (StringVal.Length != 0) {
        output.WriteRawTag(234, 18);
        output.WriteString(StringVal);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Int32Val != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Int32Val);
      }
      if (messVal_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MessVal);
      }
      size += doubleArr_.CalculateSize(_repeated_doubleArr_codec);
      size += messArr_.CalculateSize(_repeated_messArr_codec);
      size += int64Packed_.CalculateSize(_repeated_int64Packed_codec);
      if (StringVal.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(StringVal);
      }
      return size;
    }

    public void MergeFrom(SuperMess other) {
      if (other == null) {
        return;
      }
      if (other.Int32Val != 0) {
        Int32Val = other.Int32Val;
      }
      if (other.messVal_ != null) {
        if (messVal_ == null) {
          messVal_ = new global::Test.Mess();
        }
        MessVal.MergeFrom(other.MessVal);
      }
      doubleArr_.Add(other.doubleArr_);
      messArr_.Add(other.messArr_);
      int64Packed_.Add(other.int64Packed_);
      if (other.StringVal.Length != 0) {
        StringVal = other.StringVal;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Int32Val = input.ReadInt32();
            break;
          }
          case 18: {
            if (messVal_ == null) {
              messVal_ = new global::Test.Mess();
            }
            input.ReadMessage(messVal_);
            break;
          }
          case 810:
          case 809: {
            doubleArr_.AddEntriesFrom(input, _repeated_doubleArr_codec);
            break;
          }
          case 818: {
            messArr_.AddEntriesFrom(input, _repeated_messArr_codec);
            break;
          }
          case 1610:
          case 1608: {
            int64Packed_.AddEntriesFrom(input, _repeated_int64Packed_codec);
            break;
          }
          case 2410: {
            StringVal = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
